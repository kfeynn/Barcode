package com.barcode.ATS.controller;

import java.rmi.RemoteException;
import java.util.List;

import javax.xml.rpc.ServiceException;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.omg.CORBA.PRIVATE_MEMBER;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONArray;
import com.barcode.ATS.model.GoodsAddr;
import com.barcode.app.controller.GroundingController;
import com.barcode.app.model.RnBox;
import com.barcode.common.bean.ResultBean;
import com.barcode.common.utils.TiptopRequestUtils;
import com.barcode.common.utils.TiptopResponseUtils;
import com.barcode.receiving.dao.DeliverDao;
import com.barcode.tiptop.service.GetApmt110Request_GetApmt110Request;
import com.barcode.tiptop.service.GetApmt110Response_GetApmt110Response;
import com.barcode.tiptop.service.TIPTOPServiceGateWayLocator;
import com.sun.org.apache.bcel.internal.generic.NEW;

@Controller
@RequestMapping("/ATS")
public class AutoGroundingController {
	public static List<GoodsAddr> goodsAddrsList;
	@Autowired
	private DeliverDao deliverDao;
	private GroundingController groundingController;
	@RequestMapping(value = "/getRnBoxs", method = RequestMethod.POST)
	@ResponseBody
	public ResultBean<List<RnBox>> getRnBoxs(@RequestParam("boxNum")String boxnum) throws RemoteException{
		groundingController = new GroundingController();
		String strs="success";
		String rnListjson="";    
		List<RnBox> rnboxlist = null;
		String rnNum = groundingController.getRnNumbyboxNum(boxnum);
		if(rnNum==null){
			return new ResultBean<>(200, "此箱号对应的收货单列表为空",null);
		}
		String plant = rnNum.substring(4,7);
		//String plant = "S10180328";
		Document document;
		try {
			GetApmt110Response_GetApmt110Response response
			= new TIPTOPServiceGateWayLocator()
				.getTIPTOPServiceGateWayPortType()
				.getApmt110(new GetApmt110Request_GetApmt110Request(
						TiptopRequestUtils.buildQueryRNRequest(boxnum,plant)));
			document = TiptopResponseUtils.createDocument(response.getResponse());
			
			String code = TiptopResponseUtils.getStatusElementAttr(document, "code");
			if("0".equals(code)){
				rnListjson = TiptopResponseUtils.getValue(document, 1);
			}else {
				strs = TiptopResponseUtils.getStatusElementAttr(document, "description");
			}
			rnboxlist = JSONArray.parseArray(rnListjson, RnBox.class);
			if(rnboxlist ==null){
				strs = "此箱号对应的收货单列表为空";
				for(RnBox rnBox : rnboxlist){
					if(rnBox.getBarcode().equals(boxnum)){
						if(goodsAddrsList.size()!=0){
							for(GoodsAddr goodsAddr : goodsAddrsList){
								//if(rnBox.getRvb36().equals(goodsAddr.getWH_number().&& rnBox.getRvbs03().equals(goodsAddr.getSP_number()))))
							}
						}
					}
				}
			}

			} catch (ServiceException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (DocumentException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		return new ResultBean<>(200, strs,rnboxlist);
		
	}
	
}

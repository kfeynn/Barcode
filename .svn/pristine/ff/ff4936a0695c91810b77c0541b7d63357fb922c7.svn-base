package com.barcode.app.controller;

import java.rmi.RemoteException;
import java.util.List;

import javax.xml.rpc.ServiceException;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONArray;
import com.barcode.app.model.PKbox;
import com.barcode.app.model.RnBox;
import com.barcode.common.bean.ResultBean;
import com.barcode.common.utils.TiptopRequestUtils;
import com.barcode.common.utils.TiptopResponseUtils;
import com.barcode.tiptop.service.CreateApmt110Request_CreateApmt110Request;
import com.barcode.tiptop.service.CreateApmt110Response_CreateApmt110Response;
import com.barcode.tiptop.service.CreateApmt720Request_CreateApmt720Request;
import com.barcode.tiptop.service.CreateApmt720Response_CreateApmt720Response;
import com.barcode.tiptop.service.GetAsfi510Request_GetAsfi510Request;
import com.barcode.tiptop.service.GetAsfi510Response_GetAsfi510Response;
import com.barcode.tiptop.service.TIPTOPServiceGateWayLocator;
import com.barcode.tiptop.service.UpdateAqct110Request_UpdateAqct110Request;
import com.barcode.tiptop.service.UpdateAqct110Response_UpdateAqct110Response;
import com.barcode.tiptop.service.UpdateAsfi510Request_UpdateAsfi510Request;
import com.barcode.tiptop.service.UpdateAsfi510Response_UpdateAsfi510Response;

@Controller
@RequestMapping("/app")

public class IQCController {
	@RequestMapping(value = "/iqc", method = RequestMethod.POST)
	@ResponseBody
	public ResultBean<String> packing(@RequestParam("RN")String pkStr,@RequestParam("plant")String plant){
		
		try {
			UpdateAqct110Response_UpdateAqct110Response response
				= new TIPTOPServiceGateWayLocator()
					.getTIPTOPServiceGateWayPortType()
					.updateAqct110(new UpdateAqct110Request_UpdateAqct110Request(
							TiptopRequestUtils.buildIQCRequest(pkStr,plant)));
			Document document = TiptopResponseUtils.createDocument(response.getResponse());
			String code = TiptopResponseUtils.getStatusElementAttr(document, "code");
			if("0".equals(code)) return new ResultBean<>(200, "IQC结果提交成功");
			else {System.out.println("request xml : " + TiptopRequestUtils.buildPackingRequest(pkStr,plant));
				return new ResultBean<>(400, TiptopResponseUtils.getStatusElementAttr(document, "description"));
			}
		} catch (RemoteException e) {
			e.printStackTrace();
			return new ResultBean<>(400, "远程连接失败");
		} catch (ServiceException e) {
			e.printStackTrace();
			return new ResultBean<>(400, "连接服务器失败");
		} catch (DocumentException e) {
			e.printStackTrace();
			return new ResultBean<>(400, "解析返回值错误");
		}
	}
}

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context 
     http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc 
     http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx 
     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     http://www.springframework.org/schema/mvc 
     http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	
	
   	<context:annotation-config />
	<context:component-scan base-package="com.barcode.*.service">
		<context:exclude-filter type="annotation" 
			expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	
    
	<bean id="dataSource" class="com.barcode.core.databases.ThreadLocalRountingDataSource">
        <property name="targetDataSources">
            <map key-type="com.barcode.core.databases.DataSources">
            	<entry key="local" value-ref="dataSourceLocal" />
                <entry key="S10" value-ref="dataSourceS10" />
                <entry key="S20" value-ref="dataSourceS20" />
                <entry key="S30" value-ref="dataSourceS30" />
                <entry key="S50" value-ref="dataSourceS50" />
                <entry key="S60" value-ref="dataSourceS60" />
                <entry key="S70" value-ref="dataSourceS70" />
                <entry key="S80" value-ref="dataSourceS80" />
                <entry key="S90" value-ref="dataSourceS90" />
                <entry key="Test" value-ref="dataSourceTest" />
                <entry key="S31" value-ref="dataSourceS31" />
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSourceLocal" />
    </bean>
    
	<!-- 本地数据库 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <!-- 别名 -->
        <!-- <property name="typeAliasesPackage" value="com.barcode.common.model" /> -->
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:com/barcode/*/mapper/*.xml"></property>  
        <!-- <property name="configLocation" value="classpath:mybatis.xml"/> --><!-- 指定Mybatis配置文件地址 -->
    </bean>
    
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.barcode.*.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>
    
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
     	<property name="dataSource" ref="dataSource" />
 	</bean>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			
			<tx:method name="insert*"  propagation="REQUIRED" rollback-for="java.lang.Exception"  />
		    <tx:method name="update*"  propagation="REQUIRED" rollback-for="java.lang.Exception" />
		    <tx:method name="delete*"  propagation="REQUIRED" rollback-for="java.lang.Exception"  />
		    <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
		    <tx:method name="find*" propagation="SUPPORTS" read-only="true" />
		    <tx:method name="select*" propagation="SUPPORTS" read-only="true" />
		    <tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception" />

		</tx:attributes>
	</tx:advice>
 	<!-- AOP配置  -->
	<!-- <aop:config>
		<aop:pointcut id="myPointcut"
			expression="execution(* com.*.service.impl.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut" />
	</aop:config> -->

	<!-- 配置切面 -->
	<aop:config>
		<!-- 配置切入点 -->
		<aop:pointcut expression="execution(* com.barcode.*.service.impl.*.*(..))" id="pointcut"/>
		<!-- 配置切面 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
		
		<!-- <aop:aspect id="logAspectAOP" ref="logRecord">
			<aop:pointcut expression="execution(* com.*.service.impl.*.*(..))" id="logPointcut"/>
			<aop:before method="before" pointcut-ref="logPointcut"/>
			<aop:after-returning method="returning" pointcut-ref="logPointcut" returning="returnValue"/>
			<aop:after-throwing method="afterthrows" pointcut-ref="logPointcut" throwing="e"/>
		</aop:aspect> -->
	</aop:config>

	<!--支持注解驱动的事务管理，指定事务管理器 -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!--aspectj支持自动代理实现AOP功能 -->
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
</beans>